{"version":3,"sources":["MediaStream.ts"],"names":["NativeModules","defineCustomEventTarget","uniqueID","MediaStreamTrack","WebRTCModule","MEDIA_STREAM_EVENTS","MediaStream","constructor","arg","id","_reactTag","mediaStreamCreate","track","getTracks","addTrack","Array","isArray","streamId","streamReactTag","tracks","trackInfo","_tracks","push","TypeError","index","indexOf","mediaStreamAddTrack","removeTrack","splice","mediaStreamRemoveTrack","slice","getTrackById","trackId","find","getAudioTracks","filter","kind","getVideoTracks","clone","Error","toURL","release","releaseTracks","mediaStreamRelease"],"mappings":"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","sourcesContent":["\nimport { NativeModules } from 'react-native';\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { uniqueID } from './RTCUtil';\n\nimport MediaStreamTrack from './MediaStreamTrack';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_EVENTS = ['active', 'inactive', 'addtrack', 'removetrack'];\n\nexport default class MediaStream extends defineCustomEventTarget(...MEDIA_STREAM_EVENTS) {\n    id: string;\n    active: boolean = true;\n\n    _tracks: Array<MediaStreamTrack> = [];\n\n    /**\n     * The identifier of this MediaStream unique within the associated\n     * WebRTCModule instance. As the id of a remote MediaStream instance is unique\n     * only within the associated RTCPeerConnection, it is not sufficiently unique\n     * to identify this MediaStream across multiple RTCPeerConnections and to\n     * unambiguously differentiate it from a local MediaStream instance not added\n     * to an RTCPeerConnection.\n     */\n    _reactTag: string;\n\n    /**\n     * A MediaStream can be constructed in several ways, depending on the paramters\n     * that are passed here.\n     *\n     * - undefined: just a new stream, with no tracks.\n     * - MediaStream instance: a new stream, with a copy of the tracks of the passed stream.\n     * - Array of MediaStreamTrack: a new stream with a copy of the tracks in the array.\n     * - object: a new stream instance, represented by the passed info object, this is always\n     *   done internally, when the stream is first created in native and the JS wrapper is\n     *   built afterwards.\n     */\n    constructor(arg) {\n        super();\n\n        // Assigm a UUID to start with. It may get overridden for remote streams.\n        this.id = uniqueID();\n        // Local MediaStreams are created by WebRTCModule to have their id and\n        // reactTag equal because WebRTCModule follows the respective standard's\n        // recommendation for id generation i.e. uses UUID which is unique enough\n        // for the purposes of reactTag.\n        this._reactTag = this.id;\n\n        if (typeof arg === 'undefined') {\n            WebRTCModule.mediaStreamCreate(this.id);\n        } else if (arg instanceof MediaStream) {\n            WebRTCModule.mediaStreamCreate(this.id);\n            for (const track of arg.getTracks()) {\n                this.addTrack(track);\n            }\n        } else if (Array.isArray(arg)) {\n            WebRTCModule.mediaStreamCreate(this.id);\n            for (const track of arg) {\n                this.addTrack(track);\n            }\n        } else if (typeof arg === 'object' && arg.streamId && arg.streamReactTag && arg.tracks) {\n            this.id = arg.streamId;\n            this._reactTag = arg.streamReactTag;\n            for (const trackInfo of arg.tracks) {\n                // We are not using addTrack here because the track is already part of the\n                // stream, so there is no need to add it on the native side.\n                this._tracks.push(new MediaStreamTrack(trackInfo));\n            }\n        } else {\n            throw new TypeError(`invalid type: ${typeof arg}`);\n        }\n    }\n\n    addTrack(track: MediaStreamTrack) {\n        const index = this._tracks.indexOf(track);\n        if (index !== -1) {\n            return;\n        }\n        this._tracks.push(track);\n        WebRTCModule.mediaStreamAddTrack(this._reactTag, track.id);\n    }\n\n    removeTrack(track: MediaStreamTrack) {\n        const index = this._tracks.indexOf(track);\n        if (index === -1) {\n            return;\n        }\n        this._tracks.splice(index, 1);\n        WebRTCModule.mediaStreamRemoveTrack(this._reactTag, track.id);\n    }\n\n    getTracks(): Array<MediaStreamTrack> {\n        return this._tracks.slice();\n    }\n\n    getTrackById(trackId): MediaStreamTrack | undefined {\n        return this._tracks.find(track => track.id === trackId);\n    }\n\n    getAudioTracks(): Array<MediaStreamTrack> {\n        return this._tracks.filter(track => track.kind === 'audio');\n    }\n\n    getVideoTracks(): Array<MediaStreamTrack> {\n        return this._tracks.filter(track => track.kind === 'video');\n    }\n\n    clone() {\n        throw new Error('Not implemented.');\n    }\n\n    toURL() {\n        return this._reactTag;\n    }\n\n    release(releaseTracks = true) {\n        const tracks = [...this._tracks];\n        for (const track of tracks) {\n            this.removeTrack(track);\n            if (releaseTracks) {\n                track.release();\n            }\n        }\n\n        WebRTCModule.mediaStreamRelease(this._reactTag);\n    }\n}\n"]}