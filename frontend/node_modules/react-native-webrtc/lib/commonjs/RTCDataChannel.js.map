{"version":3,"sources":["RTCDataChannel.ts"],"names":["WebRTCModule","NativeModules","DATA_CHANNEL_EVENTS","RTCDataChannel","constructor","info","_peerConnectionId","peerConnectionId","_reactTag","reactTag","_label","label","_id","id","_ordered","Boolean","ordered","_maxPacketLifeTime","maxPacketLifeTime","_maxRetransmits","maxRetransmits","_protocol","protocol","_negotiated","negotiated","_readyState","readyState","_registerEvents","send","data","dataChannelSend","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","TypeError","base64","fromByteArray","close","dataChannelClose","_unregisterEvents","_subscriptions","forEach","e","remove","EventEmitter","addListener","ev","state","dispatchEvent","RTCDataChannelEvent","channel","dataChannelDispose","type","toByteArray","MessageEvent"],"mappings":"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","sourcesContent":["\nimport { NativeModules } from 'react-native';\nimport * as base64 from 'base64-js';\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport MessageEvent from './MessageEvent';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport EventEmitter from './EventEmitter';\n\nconst { WebRTCModule } = NativeModules;\n\ntype RTCDataChannelState = 'connecting' | 'open' | 'closing' | 'closed';\n\nconst DATA_CHANNEL_EVENTS = ['open', 'message', 'bufferedamountlow', 'closing', 'close', 'error'];\n\nexport default class RTCDataChannel extends defineCustomEventTarget(...DATA_CHANNEL_EVENTS) {\n    _peerConnectionId: number;\n    _reactTag: string;\n    _id: number;\n    _label: string;\n    _maxPacketLifeTime?: number;\n    _maxRetransmits?: number;\n    _negotiated: boolean;\n    _ordered: boolean;\n    _protocol: string;\n    _readyState: RTCDataChannelState;\n    _subscriptions: Array<any> = [];\n\n    binaryType: string = 'arraybuffer'; // we only support 'arraybuffer'\n    bufferedAmount: number = 0;\n    bufferedAmountLowThreshold: number = 0;\n\n    constructor(info) {\n        super();\n\n        this._peerConnectionId = info.peerConnectionId;\n        this._reactTag = info.reactTag;\n\n        this._label = info.label;\n        this._id = info.id === -1 ? null : info.id; // null until negotiated.\n        this._ordered = Boolean(info.ordered);\n        this._maxPacketLifeTime = info.maxPacketLifeTime;\n        this._maxRetransmits = info.maxRetransmits;\n        this._protocol = info.protocol || '';\n        this._negotiated = Boolean(info.negotiated);\n        this._readyState = info.readyState;\n\n        this._registerEvents();\n    }\n\n    get label(): string {\n        return this._label;\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get ordered(): boolean {\n        return this._ordered;\n    }\n\n    get maxPacketLifeTime(): number | undefined {\n        return this._maxPacketLifeTime;\n    }\n\n    get maxRetransmits(): number | undefined {\n        return this._maxRetransmits;\n    }\n\n    get protocol(): string {\n        return this._protocol;\n    }\n\n    get negotiated(): boolean {\n        return this._negotiated;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    send(data: string | ArrayBuffer | ArrayBufferView) {\n        if (typeof data === 'string') {\n            WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, data, 'text');\n            return;\n        }\n\n        // Safely convert the buffer object to an Uint8Array for base64-encoding\n        if (ArrayBuffer.isView(data)) {\n            data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        } else if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        } else {\n            throw new TypeError('Data must be either string, ArrayBuffer, or ArrayBufferView');\n        }\n        WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, base64.fromByteArray(data as Uint8Array), 'binary');\n    }\n\n    close() {\n        if (this._readyState === 'closing' || this._readyState === 'closed') {\n            return;\n        }\n        WebRTCModule.dataChannelClose(this._peerConnectionId, this._reactTag);\n    }\n\n    _unregisterEvents() {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n    }\n\n    _registerEvents() {\n        this._subscriptions = [\n            EventEmitter.addListener('dataChannelStateChanged', ev => {\n                if (ev.reactTag !== this._reactTag) {\n                    return;\n                }\n                this._readyState = ev.state;\n                if (this._id === null && ev.id !== -1) {\n                    this._id = ev.id;\n                }\n                if (this._readyState === 'open') {\n                    // @ts-ignore\n                    this.dispatchEvent(new RTCDataChannelEvent('open', { channel: this }));\n                } else if (this._readyState === 'closing') {\n                    // @ts-ignore\n                    this.dispatchEvent(new RTCDataChannelEvent('closing', { channel: this }));\n                } else if (this._readyState === 'closed') {\n                    // @ts-ignore\n                    this.dispatchEvent(new RTCDataChannelEvent('close', { channel: this }));\n                    this._unregisterEvents();\n                    WebRTCModule.dataChannelDispose(this._peerConnectionId, this._reactTag);\n                }\n            }),\n            EventEmitter.addListener('dataChannelReceiveMessage', ev => {\n                if (ev.reactTag !== this._reactTag) {\n                    return;\n                }\n                let data = ev.data;\n                if (ev.type === 'binary') {\n                    data = base64.toByteArray(ev.data).buffer;\n                }\n                // @ts-ignore\n                this.dispatchEvent(new MessageEvent('message', { data }));\n            })\n        ];\n    }\n}\n"]}