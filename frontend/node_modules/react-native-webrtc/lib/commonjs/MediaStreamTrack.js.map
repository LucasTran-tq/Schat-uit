{"version":3,"sources":["MediaStreamTrack.ts"],"names":["WebRTCModule","NativeModules","MEDIA_STREAM_TRACK_EVENTS","MediaStreamTrack","constructor","info","_constraints","constraints","_enabled","enabled","_settings","settings","_muted","id","kind","label","remote","_readyState","readyState","toLowerCase","mediaStreamTrackSetEnabled","muted","stop","_switchCamera","Error","mediaStreamTrackSwitchCamera","applyConstraints","clone","getCapabilities","getConstraints","getSettings","release","mediaStreamTrackRelease"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;AAEA,MAAMC,yBAAyB,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAlC;;AAIA,MAAMC,gBAAN,SAA+B,8CAAwB,GAAGD,yBAA3B,CAA/B,CAAqF;AAYjFE,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;;AADc;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAGd,SAAKC,YAAL,GAAoBD,IAAI,CAACE,WAAL,IAAoB,EAAxC;AACA,SAAKC,QAAL,GAAgBH,IAAI,CAACI,OAArB;AACA,SAAKC,SAAL,GAAiBL,IAAI,CAACM,QAAL,IAAiB,EAAlC;AACA,SAAKC,MAAL,GAAc,KAAd;AAEA,SAAKC,EAAL,GAAUR,IAAI,CAACQ,EAAf;AACA,SAAKC,IAAL,GAAYT,IAAI,CAACS,IAAjB;AACA,SAAKC,KAAL,GAAaV,IAAI,CAACU,KAAlB;AACA,SAAKC,MAAL,GAAcX,IAAI,CAACW,MAAnB;;AAEA,UAAMC,WAAW,GAAGZ,IAAI,CAACa,UAAL,CAAgBC,WAAhB,EAApB;;AACA,SAAKD,UAAL,GAAkBD,WAAW,KAAK,cAAhB,IAAkCA,WAAW,KAAK,MAAlD,GAA2D,MAA3D,GAAoE,OAAtF;AACH;;AAEU,MAAPR,OAAO,GAAY;AACnB,WAAO,KAAKD,QAAZ;AACH;;AAEU,MAAPC,OAAO,CAACA,OAAD,EAAmB;AAC1B,QAAIA,OAAO,KAAK,KAAKD,QAArB,EAA+B;AAC3B;AACH;;AACDR,IAAAA,YAAY,CAACoB,0BAAb,CAAwC,KAAKP,EAA7C,EAAiD,CAAC,KAAKL,QAAvD;AACA,SAAKA,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACH;;AAEQ,MAALa,KAAK,GAAY;AACjB,WAAO,KAAKT,MAAZ;AACH;;AAEDU,EAAAA,IAAI,GAAG;AACHtB,IAAAA,YAAY,CAACoB,0BAAb,CAAwC,KAAKP,EAA7C,EAAiD,KAAjD;AACA,SAAKK,UAAL,GAAkB,OAAlB,CAFG,CAGH;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKP,MAAT,EAAiB;AACb,YAAM,IAAIQ,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACD,QAAI,KAAKV,IAAL,KAAc,OAAlB,EAA2B;AACvB,YAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACDxB,IAAAA,YAAY,CAACyB,4BAAb,CAA0C,KAAKZ,EAA/C;AACH;;AAEDa,EAAAA,gBAAgB,GAAG;AACf,UAAM,IAAIF,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAEDG,EAAAA,KAAK,GAAG;AACJ,UAAM,IAAIH,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAEDI,EAAAA,eAAe,GAAG;AACd,UAAM,IAAIJ,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAEDK,EAAAA,cAAc,GAAG;AACb,WAAO,wBAAU,KAAKvB,YAAf,CAAP;AACH;;AAEDwB,EAAAA,WAAW,GAAG;AACV,WAAO,wBAAU,KAAKpB,SAAf,CAAP;AACH;;AAEDqB,EAAAA,OAAO,GAAG;AACN/B,IAAAA,YAAY,CAACgC,uBAAb,CAAqC,KAAKnB,EAA1C;AACH;;AA1FgF;;eA6FtEV,gB","sourcesContent":["\nimport { NativeModules } from 'react-native';\nimport { defineCustomEventTarget } from 'event-target-shim';\n\nimport { deepClone } from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_TRACK_EVENTS = ['ended', 'mute', 'unmute'];\n\ntype MediaStreamTrackState = 'live' | 'ended';\n\nclass MediaStreamTrack extends defineCustomEventTarget(...MEDIA_STREAM_TRACK_EVENTS) {\n    _constraints: object;\n    _enabled: boolean;\n    _settings: object;\n    _muted: boolean;\n\n    id: string;\n    kind: string;\n    label: string;\n    readyState: MediaStreamTrackState;\n    remote: boolean;\n\n    constructor(info) {\n        super();\n\n        this._constraints = info.constraints || {};\n        this._enabled = info.enabled;\n        this._settings = info.settings || {};\n        this._muted = false;\n\n        this.id = info.id;\n        this.kind = info.kind;\n        this.label = info.label;\n        this.remote = info.remote;\n\n        const _readyState = info.readyState.toLowerCase();\n        this.readyState = _readyState === 'initializing' || _readyState === 'live' ? 'live' : 'ended';\n    }\n\n    get enabled(): boolean {\n        return this._enabled;\n    }\n\n    set enabled(enabled: boolean) {\n        if (enabled === this._enabled) {\n            return;\n        }\n        WebRTCModule.mediaStreamTrackSetEnabled(this.id, !this._enabled);\n        this._enabled = !this._enabled;\n    }\n\n    get muted(): boolean {\n        return this._muted;\n    }\n\n    stop() {\n        WebRTCModule.mediaStreamTrackSetEnabled(this.id, false);\n        this.readyState = 'ended';\n        // TODO: save some stopped flag?\n    }\n\n    /**\n     * Private / custom API for switching the cameras on the fly, without the\n     * need for adding / removing tracks or doing any SDP renegotiation.\n     *\n     * This is how the reference application (AppRTCMobile) implements camera\n     * switching.\n     */\n    _switchCamera() {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n        WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n\n    applyConstraints() {\n        throw new Error('Not implemented.');\n    }\n\n    clone() {\n        throw new Error('Not implemented.');\n    }\n\n    getCapabilities() {\n        throw new Error('Not implemented.');\n    }\n\n    getConstraints() {\n        return deepClone(this._constraints);\n    }\n\n    getSettings() {\n        return deepClone(this._settings);\n    }\n\n    release() {\n        WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n}\n\nexport default MediaStreamTrack;\n"]}