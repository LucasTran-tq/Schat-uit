{"version":3,"sources":["RTCPeerConnection.ts"],"names":["WebRTCModule","NativeModules","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","constructor","configuration","_peerConnectionId","peerConnectionInit","_registerEvents","addStream","stream","index","_localStreams","indexOf","peerConnectionAddStream","_reactTag","push","removeStream","splice","peerConnectionRemoveStream","createOffer","options","Promise","resolve","reject","peerConnectionCreateOffer","RTCUtil","normalizeOfferAnswerOptions","successful","data","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","desc","toJSON","newSdp","peerConnectionSetLocalDescription","localDescription","RTCSessionDescription","setRemoteDescription","peerConnectionSetRemoteDescription","remoteDescription","addIceCandidate","candidate","peerConnectionAddICECandidate","getStats","peerConnectionGetStats","then","Map","JSON","parse","getLocalStreams","slice","getRemoteStreams","_remoteStreams","close","peerConnectionClose","restartIce","peerConnectionRestartIce","_unregisterEvents","_subscriptions","forEach","e","remove","EventEmitter","addListener","ev","id","dispatchEvent","RTCEvent","iceConnectionState","connectionState","signalingState","MediaStream","sdp","MediaStreamEvent","find","s","streamId","peerConnectionId","track","t","_tracks","trackId","_muted","muted","eventName","MediaStreamTrackEvent","RTCIceCandidate","RTCIceCandidateEvent","iceGatheringState","channel","RTCDataChannel","dataChannel","RTCDataChannelEvent","createDataChannel","label","dataChannelDict","TypeError","channelInfo"],"mappings":"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","sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport MediaStream from './MediaStream';\nimport MediaStreamEvent from './MediaStreamEvent';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCSessionDescription from './RTCSessionDescription';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCEvent from './RTCEvent';\nimport * as RTCUtil from './RTCUtil';\nimport EventEmitter from './EventEmitter';\n\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\nconst PEER_CONNECTION_EVENTS = [\n    'connectionstatechange',\n    'icecandidate',\n    'icecandidateerror',\n    'iceconnectionstatechange',\n    'icegatheringstatechange',\n    'negotiationneeded',\n    'signalingstatechange',\n    'datachannel',\n    'addstream',\n    'removestream'\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends defineCustomEventTarget(...PEER_CONNECTION_EVENTS) {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _peerConnectionId: number;\n    _localStreams: Array<MediaStream> = [];\n    _remoteStreams: Array<MediaStream> = [];\n    _subscriptions: Array<any> = [];\n\n    constructor(configuration) {\n        super();\n        this._peerConnectionId = nextPeerConnectionId++;\n        WebRTCModule.peerConnectionInit(configuration, this._peerConnectionId);\n        this._registerEvents();\n    }\n\n    addStream(stream: MediaStream) {\n        const index = this._localStreams.indexOf(stream);\n        if (index !== -1) {\n            return;\n        }\n        WebRTCModule.peerConnectionAddStream(stream._reactTag, this._peerConnectionId);\n        this._localStreams.push(stream);\n    }\n\n    removeStream(stream: MediaStream) {\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n            return;\n        }\n        this._localStreams.splice(index, 1);\n        WebRTCModule.peerConnectionRemoveStream(stream._reactTag, this._peerConnectionId);\n    }\n\n    createOffer(options) {\n        return new Promise((resolve, reject) => {\n            WebRTCModule.peerConnectionCreateOffer(\n                this._peerConnectionId,\n                RTCUtil.normalizeOfferAnswerOptions(options),\n                (successful, data) => {\n                    if (successful) {\n                        resolve(data);\n                    } else {\n                        reject(data); // TODO: convert to NavigatorUserMediaError\n                    }\n                }\n            );\n        });\n    }\n\n    createAnswer(options = {}) {\n        return new Promise((resolve, reject) => {\n            WebRTCModule.peerConnectionCreateAnswer(\n                this._peerConnectionId,\n                RTCUtil.normalizeOfferAnswerOptions(options),\n                (successful, data) => {\n                    if (successful) {\n                        resolve(data);\n                    } else {\n                        reject(data);\n                    }\n                }\n            );\n        });\n    }\n\n    setConfiguration(configuration) {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._peerConnectionId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription): Promise<void> {\n        const desc = sessionDescription\n            ? sessionDescription.toJSON\n                ? sessionDescription.toJSON()\n                : sessionDescription\n            : null;\n        const newSdp = await WebRTCModule.peerConnectionSetLocalDescription(this._peerConnectionId, desc);\n\n        this.localDescription = new RTCSessionDescription(newSdp);\n    }\n\n    setRemoteDescription(sessionDescription: RTCSessionDescription): Promise<void> {\n        return new Promise((resolve, reject) => {\n            WebRTCModule.peerConnectionSetRemoteDescription(\n                sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription,\n                this._peerConnectionId,\n                (successful, data) => {\n                    if (successful) {\n                        this.remoteDescription = new RTCSessionDescription(data);\n                        resolve();\n                    } else {\n                        reject(data);\n                    }\n                }\n            );\n        });\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of cantidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._peerConnectionId,\n            candidate.toJSON ? candidate.toJSON() : candidate\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    getStats() {\n        return WebRTCModule.peerConnectionGetStats(this._peerConnectionId).then(data => {\n            /* On both Android and iOS it is faster to construct a single\n            JSON string representing the Map of StatsReports and have it\n            pass through the React Native bridge rather than the Map of\n            StatsReports. While the implementations do try to be faster in\n            general, the stress is on being faster to pass through the React\n            Native bridge which is a bottleneck that tends to be visible in\n            the UI when there is congestion involving UI-related passing.\n\n            TODO Implement the logic for filtering the stats based on \n            the sender/receiver\n            */\n            return new Map(JSON.parse(data));\n        });\n    }\n\n    getLocalStreams() {\n        return this._localStreams.slice();\n    }\n\n    getRemoteStreams() {\n        return this._remoteStreams.slice();\n    }\n\n    close() {\n        WebRTCModule.peerConnectionClose(this._peerConnectionId);\n    }\n\n    restartIce() {\n        WebRTCModule.peerConnectionRestartIce(this._peerConnectionId);\n    }\n\n    _unregisterEvents(): void {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n    }\n\n    _registerEvents(): void {\n        this._subscriptions = [\n            EventEmitter.addListener('peerConnectionOnRenegotiationNeeded', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                // @ts-ignore\n                this.dispatchEvent(new RTCEvent('negotiationneeded'));\n            }),\n            EventEmitter.addListener('peerConnectionIceConnectionChanged', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                this.iceConnectionState = ev.iceConnectionState;\n                // @ts-ignore\n                this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n                if (ev.iceConnectionState === 'closed') {\n                    // This PeerConnection is done, clean up event handlers.\n                    this._unregisterEvents();\n                }\n            }),\n            EventEmitter.addListener('peerConnectionStateChanged', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                this.connectionState = ev.connectionState;\n                // @ts-ignore\n                this.dispatchEvent(new RTCEvent('connectionstatechange'));\n                if (ev.connectionState === 'closed') {\n                    // This PeerConnection is done, clean up event handlers.\n                    this._unregisterEvents();\n                }\n            }),\n            EventEmitter.addListener('peerConnectionSignalingStateChanged', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                this.signalingState = ev.signalingState;\n                // @ts-ignore\n                this.dispatchEvent(new RTCEvent('signalingstatechange'));\n            }),\n            EventEmitter.addListener('peerConnectionAddedStream', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                const stream = new MediaStream(ev);\n                this._remoteStreams.push(stream);\n                this.remoteDescription = new RTCSessionDescription(ev.sdp);\n                // @ts-ignore\n                this.dispatchEvent(new MediaStreamEvent('addstream', { stream }));\n            }),\n            EventEmitter.addListener('peerConnectionRemovedStream', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                const stream = this._remoteStreams.find(s => s._reactTag === ev.streamId);\n                if (stream) {\n                    const index = this._remoteStreams.indexOf(stream);\n                    if (index !== -1) {\n                        this._remoteStreams.splice(index, 1);\n                    }\n                }\n                this.remoteDescription = new RTCSessionDescription(ev.sdp);\n                // @ts-ignore\n                this.dispatchEvent(new MediaStreamEvent('removestream', { stream }));\n            }),\n            EventEmitter.addListener('mediaStreamTrackMuteChanged', ev => {\n                if (ev.peerConnectionId !== this._peerConnectionId) {\n                    return;\n                }\n                let track;\n                for (const stream of this._remoteStreams) {\n                    const t = stream._tracks.find(track => track.id === ev.trackId);\n                    if (t) {\n                        track = t;\n                        break;\n                    }\n                }\n                if (track) {\n                    track._muted = ev.muted;\n                    const eventName = ev.muted ? 'mute' : 'unmute';\n                    track.dispatchEvent(new MediaStreamTrackEvent(eventName, { track }));\n                }\n            }),\n            EventEmitter.addListener('peerConnectionGotICECandidate', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                this.localDescription = new RTCSessionDescription(ev.sdp);\n                const candidate = new RTCIceCandidate(ev.candidate);\n                // @ts-ignore\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n            }),\n            EventEmitter.addListener('peerConnectionIceGatheringChanged', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                this.iceGatheringState = ev.iceGatheringState;\n\n                if (this.iceGatheringState === 'complete') {\n                    this.localDescription = new RTCSessionDescription(ev.sdp);\n                    // @ts-ignore\n                    this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n                }\n\n                // @ts-ignore\n                this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n            }),\n            EventEmitter.addListener('peerConnectionDidOpenDataChannel', ev => {\n                if (ev.id !== this._peerConnectionId) {\n                    return;\n                }\n                const channel = new RTCDataChannel(ev.dataChannel);\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n            })\n        ];\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit) {\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._peerConnectionId, label, dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n}\n"]}